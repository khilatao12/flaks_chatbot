from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import pymysql
import re
import underthesea
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from fuzzywuzzy import fuzz
from fuzzywuzzy import process


app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh OpenAI API Key (thay YOUR_API_KEY b·∫±ng API key c·ªßa b·∫°n)
openai.api_key = ""

# üîπ K·∫øt n·ªëi MySQL
def connect_db():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="",
        database="chatbot_db",
        charset="utf8mb4",
        cursorclass=pymysql.cursors.DictCursor
    )

# üîπ So s√°nh chu·ªói theo t·ª´ng t·ª´
def compare_strings_by_word(string1, string2):
    # Ti·ªÅn x·ª≠ l√Ω t·ª´ng chu·ªói - chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng, lo·∫°i b·ªè d·∫•u c√¢u v√† t√°ch t·ª´
    words1 = set(preprocess_question(string1).split())  # s·ª≠ d·ª•ng h√†m preprocess_question
    words2 = set(preprocess_question(string2).split())

    # T√¨m t·ª´ chung
    matching_words = words1.intersection(words2)

    # T√≠nh t·ª∑ l·ªá kh·ªõp
    total_words = len(words1.union(words2))
    matching_percentage = (len(matching_words) / total_words) * 100 if total_words > 0 else 0

    # K·∫øt qu·∫£
    return {
        "matching_words": list(matching_words),
        "matching_percentage": round(matching_percentage, 2),
    }
# üîπ Ti·ªÅn x·ª≠ l√Ω c√¢u h·ªèi ng∆∞·ªùi d√πng
def preprocess_question(question):
    question = question.lower().strip()
    question = re.sub(r'[^\w\s]', '', question)  # Lo·∫°i b·ªè d·∫•u c√¢u
    question_tokens = underthesea.word_tokenize(question)  # T√°ch t·ª´ ti·∫øng Vi·ªát
    return " ".join(question_tokens)

# üîπ L·∫•y danh s√°ch intents t·ª´ database
def get_all_intents():
    db = connect_db()
    try:
        with db.cursor() as cursor:
            cursor.execute("SELECT id, intent_name FROM intents")
            intents = {row["id"]: row["intent_name"] for row in cursor.fetchall()}
        return intents  # Tr·∫£ v·ªÅ danh s√°ch intents {id: t√™n intent}
    finally:
        db.close()


# üîπ X√°c ƒë·ªãnh intent c·ªßa c√¢u h·ªèi
# üîπ X√°c ƒë·ªãnh intent c·ªßa c√¢u h·ªèi
def find_intent(question):
    db = connect_db()
    try:
        with db.cursor() as cursor:
            # L·∫•y t·ª´ kh√≥a c√πng intent_id v√† response_id t·ª´ DB
            cursor.execute("""
                SELECT keyword, intent_id, response_id
                FROM keywords_responses
            """)
            keywords = cursor.fetchall()  # [{keyword, intent_id, response_id}, {...}]

        # S·∫Øp x·∫øp t·ª´ kh√≥a theo ƒë·ªô d√†i gi·∫£m d·∫ßn
        keywords = sorted(keywords, key=lambda k: len(k['keyword']), reverse=True)

        # Ti·ªÅn x·ª≠ l√Ω c√¢u h·ªèi ng∆∞·ªùi d√πng
        processed_question = preprocess_question(question)

        # 1. Ki·ªÉm tra t·ª´ kh√≥a "ch√≠nh x√°c" trong c√¢u h·ªèi
        for keyword_data in keywords:
            keyword = preprocess_question(keyword_data['keyword'])
            intent_id = keyword_data['intent_id']
            response_id = keyword_data['response_id']

            # N·∫øu keyword xu·∫•t hi·ªán ch√≠nh x√°c (bao g·ªìm c·∫£ chu·ªói con), tr·∫£ v·ªÅ intent + response
            if keyword in processed_question:
                return {"intent_id": intent_id, "response_id": response_id}

        # 2. N·∫øu kh√¥ng c√≥ keyword n√†o kh·ªõp ch√≠nh x√°c, s·ª≠ d·ª•ng Fuzzy Matching
        best_match = {"intent_id": None, "response_id": None}  # K·∫øt qu·∫£ t·ªët nh·∫•t
        best_match_score = 0

        for keyword_data in keywords:
            keyword = preprocess_question(keyword_data['keyword'])
            intent_id = keyword_data['intent_id']
            response_id = keyword_data['response_id']

            # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng fuzzy
            similarity_score = fuzz.token_set_ratio(processed_question, keyword)

            if similarity_score > best_match_score:
                best_match_score = similarity_score
                best_match = {"intent_id": intent_id, "response_id": response_id}

        # 3. N·∫øu Fuzzy Matching ƒë·∫°t ng∆∞·ª°ng 70, ch·ªçn intent ph√π h·ª£p
        if best_match_score >= 85:
            return best_match

        # N·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p
        return {"intent_id": None, "response_id": None}

    finally:
        db.close()

# üîπ L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ database
def get_response_from_db(intent_id, response_id):
    print("Debug: intent_id =", intent_id, ", response_id =", response_id)

    if not intent_id or not response_id:
        return "Xin l·ªói, t√¥i kh√¥ng c√≥ ph·∫£n h·ªìi ph√π h·ª£p."  # Tr∆∞·ªùng h·ª£p kh√¥ng ƒë·ªß th√¥ng tin.

    db = connect_db()
    try:
        with db.cursor() as cursor:
            # Truy v·∫•n b·∫±ng c·∫£ intent_id v√† response_id
            cursor.execute("""
                SELECT response_text
                FROM responses
                WHERE intent_id = %s AND id = %s
            """, (intent_id, response_id))

            result = cursor.fetchone()
            return result['response_text'] if result else "Xin l·ªói, kh√¥ng t√¨m th·∫•y ph·∫£n h·ªìi ph√π h·ª£p."
    finally:
        db.close()


# üîπ G·ªçi OpenAI ChatGPT API
def get_chatgpt_response(question):

    try:
        question_with_uneti = f"[Tr∆∞·ªùng ƒë·∫°i h·ªçc kinh t·∫ø-k·ªπ thu·∫≠t c√¥ng nghi·ªáp(UNETI): ] {question}"
        response = openai.ChatCompletion.create(  # <--- ƒê√∫ng v·ªõi SDK >= 1.0.0
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chatbot h·ªó tr·ª£ ng∆∞·ªùi d√πng."},
                {"role": "user", "content": question_with_uneti},
            ],
            temperature=0.7,  # ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô s√°ng t·∫°o (0.0 th·∫•p nh·∫•t, 2.0 cao nh·∫•t)
            max_tokens=300    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t·ª´ tr·∫£ v·ªÅ
        )
        # Tr·∫£ v·ªÅ n·ªôi dung c·ªßa ph·∫£n h·ªìi
        return response.choices[0].message.get("content").strip()
    except Exception as e:
        print(f"L·ªói khi g·ªçi OpenAI API: {e}")
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n v√†o l√∫c n√†y."


# üîπ API x·ª≠ l√Ω c√¢u h·ªèi
@app.route('/get-answer', methods=['POST'])
def get_answer():
    # L·∫•y c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    user_data = request.get_json()
    question = user_data.get("question", "").strip()

    if not question:  # Ki·ªÉm tra c√¢u h·ªèi c√≥ h·ª£p l·ªá kh√¥ng
        return jsonify({
            "intent_id": None,
            "response_id": None,
            "answer": "Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá."
        }), 400

    # G·ªçi `find_intent` ƒë·ªÉ x√°c ƒë·ªãnh intent v√† response
    result = find_intent(question)
    intent_id = result.get("intent_id")
    response_id = result.get("response_id")

    # N·∫øu c√≥ intent_id v√† response_id, l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ c∆° s·ªü d·ªØ li·ªáu
    if intent_id and response_id:
        response = get_response_from_db(intent_id, response_id)
        return jsonify({
            "intent_id": intent_id,
            "response_id": response_id,
            "answer": response
        })

    # 4. N·∫øu kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi, s·ª≠ d·ª•ng ChatGPT
    gpt_response = get_chatgpt_response(question)
    return jsonify({"answer": gpt_response})

# Ch·∫°y server Flask
if __name__ == '__main__':
    app.run(debug=True)
